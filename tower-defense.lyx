#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Tower Defense Architecture
\end_layout

\begin_layout Standard
In tower defense games, you are charged with protecting a castle by placing
 towers with various capabilities along paths that monsters travel along.
 Some monsters are fast; some are slow; some are tough; some are destructive.
 Different towers are better at defending different types of monsters.
 One strategy is to thin out some of the monsters up front and then use
 specialized towers closer to the castle.
 This same strategy can be used to guide the design of software architectures.
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

tower defense architecture
\begin_inset Quotes erd
\end_inset

 is like 
\begin_inset Quotes eld
\end_inset

reasonable programming
\begin_inset Quotes erd
\end_inset

 but at a bigger scale.
 Instead of just writing functions that are more predictable so you can
 better reason about your software, you define layers of software with specific
 guarantees and then arrange them in your system -- just like placing towers
 along a monster-ridden path.
 A tower defense architecture is similar to other patterns we often see:
\end_layout

\begin_layout Itemize
A firewall filters out dangerous/insecure data packets/requests before they
 reach app servers.
\end_layout

\begin_layout Itemize
ETL (extract-transform-load) is used to condition data from disparate sources
 so they can be analyzed uniformly.
\end_layout

\begin_layout Itemize
A shell pipeline transforms and filters data at each step using an array
 of command-line utilities.
\end_layout

\begin_layout Standard
However, a tower defense architecture has one key differentiating feature:
 each layer 
\emph on
must
\emph default
 make guarantees about the condition of the data leaving it.
 For instance, a layer might guarantee that all strings are ASCII, or that
 every username is valid, or that there are no empty records--each layer
 must thin out certain types of 
\begin_inset Quotes eld
\end_inset

monsters
\begin_inset Quotes erd
\end_inset

.
 Doing this allows you to make increasingly strong assumptions about data
 as it approaches your 
\begin_inset Quotes eld
\end_inset

castle
\begin_inset Quotes erd
\end_inset

.
 Ultimately, your 
\begin_inset Quotes eld
\end_inset

castle code
\begin_inset Quotes erd
\end_inset

 (the code that provides the most value and is the most interesting algorithmica
lly) should deal with inputs that are very predictable and very clean, which
 means that it, too, can be written plainly and cleanly under strong, valid
 assumptions.
\end_layout

\begin_layout Standard
Tower defense architectures are effective because they enable us to reason
 about them.
 They make the core parts of our systems easier to develop and understand.
 However, they work only when you can make gurantees about each software
 layer.
 If your guarantees have holes in them, monsters 
\emph on
will
\emph default
 get through.
\end_layout

\end_body
\end_document
